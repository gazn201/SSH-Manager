#!/usr/bin/env python3

import argparse
import sys

from manager_lib.core import *
from manager_lib.installer import manager_init
from manager_lib.export import *

command_aliases = {
    '-a': 'add',
    '-s': 'search',
    '-A': 'addkey',
    '-d': 'delete',
    '-w': 'write',
    '-e': 'edit',
    '-E': 'export',
    '-D': 'delkey',
    '-g': 'get'
}

if len(sys.argv) > 1 and sys.argv[1] in command_aliases:
    sys.argv[1] = command_aliases[sys.argv[1]]

def setup_parser():
    parser = argparse.ArgumentParser(
        prog='ssh-manager',
        add_help=False,
        description='Easily manage your .ssh/config and private keys.',
        epilog='made with blood and tears'
    )

    sub = parser.add_subparsers(dest='command', help='Available commands')

    sub.add_parser('add')
    sub.add_parser('addkey')
    sub.add_parser('write')
    sub.add_parser('export')
    sub.add_parser('init')

    search_arg = sub.add_parser('search')
    search_arg.add_argument('hostname', type=str, help='Hostname of host')

    delkey_arg = sub.add_parser('delkey')
    delkey_arg.add_argument('key_id', type=int, help='Key\'s ID')

    delete_arg = sub.add_parser('delete')
    delete_arg.add_argument('host_key', type=str, help='Key of host')

    edit_arg = sub.add_parser('edit')
    edit_arg.add_argument('edit_key', type=str, help='Key of host')

    list_arg = sub.add_parser('get')
    list_arg.add_argument('selector', type=str, help='list key, hosts')

    return parser

def main():
    parser = setup_parser()
    args = parser.parse_args()

    actions = {
        "add": lambda: (createBaseConfig(), generateSSHConfig()),
        "addkey": addNewKey,
        "search": lambda: searchHosts(args.hostname),
        "delete": lambda: (deleteHosts(args.host_key), generateSSHConfig()),
        "delkey": lambda: deleteKey(args.key_id),
        "write": generateSSHConfig,
        "edit": lambda: (editHosts(args.edit_key), generateSSHConfig()),
        "export": export_all_to_yaml,
        "get": lambda: listParams(args.selector),
        "init": manager_init
    }

    action = actions.get(args.command)

    if action:
        action()
    else:
        parser.print_help()

if __name__ == '__main__':
    main()
